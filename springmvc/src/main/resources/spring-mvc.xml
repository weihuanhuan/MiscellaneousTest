<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <!--
        JF xmlns:schemaLocation，是错误的！是错误的！是错误的！
        注意这里的 schemaLocation 属性是命名空间 xsi 的，起作用是指出url对应的xsd文件，
        而xmlns指的是定义一个xml命名空间，如xmlns:jason，定义了命令空间jason，
        所有切不可写成xmlns:schemaLocation，这就成了定义命令空间，解析时就会报错Cannot find the declaration of element 'beans'，
        因为本来是要使用xsi:schemaLocation来指明定义beans命名空间的xsd文件的位置，结果却声明了一个新的命名空间schemaLocation
    -->

    <!-- 自动扫描包，实现支持注解的IOC -->
    <context:component-scan base-package="spring"/>

    <!-- Spring MVC不处理静态资源 -->
    <mvc:default-servlet-handler/>

    <!-- 支持mvc注解驱动 -->
    <!--在spring中一般采用@RequestMapping注解来完成映射关系，
    要想使@RequestMapping注解生效必须向上下文中注册DefaultAnnotationHandlerMapping和一个AnnotationMethodHandlerAdapter
    实例，这两个实例分别在类级别和方法级别处理。而annotation-driven配置帮助我们自动完成上述两个实例的注入。-->
    <!-- The bean name of the Validator that is to be used to validate Controller model objects. -->
    <mvc:annotation-driven validator="spring.validator.config.WebMvcValidatorConfig.parameterMessageInterpolatorValidator"/>

    <!-- 视图解析器 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver"
            id="internalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/"/>
        <!-- 后缀 -->
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--context:annotation-config这个的作用是什么-->
    <!--<context:annotation-config />-->

    <!--测试扫描路径是 * 时，为什么cache会加载

        <context:component-scan base-package="*"/>

    但是 tomcat7 没有这个问题，tomcat8 则有，初步调查发现
    org.springframework.core.io.support.PathMatchingResourcePatternResolver.findAllClassPathResources
    方法使用 Enumeration<URL> resourceUrls = getClassLoader().getResources(path)， 来取得服务器资源，
     tomcat7返回 不包括WEB-INF/lib下的jar，而tomcat8返回则包括，则jar包就也变成了spring可扫描的资源了。
     而多余的WEB-INF/lib下的spring-context-3.1.0.RELEASE.jar中存在ProxyCachingConfiguration类，
     其类上注解有 @Configuration 在全扫描时会实例化，
     同时其父类的方法 reconcileCacheManager 上有注解 @PostConstruct 实例化是会调用这个方法，
     但这时该bean的前置条件并不满足，导致实例化错误，出现如下提示。


    对于如下设置 任务注解，有什么用?

    <task:annotation-driven/>

    当没有这个设置时：
    Caused by: java.lang.IllegalArgumentException:
    @EnableAsync annotation metadata was not injected
        at org.springframework.util.Assert.notNull(Assert.java:112)
        at org.springframework.scheduling.annotation.ProxyAsyncConfiguration.asyncAdvisor(ProxyAsyncConfiguration.java:45)
        at org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$f0b0e7f1.CGLIB$asyncAdvisor$0(<generated>)
        at org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$f0b0e7f1$$FastClassByCGLIB$$c012a15f.invoke(<generated>)
        at net.sf.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:167)
        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:280)
        at org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerByCGLIB$$f0b0e7f1.asyncAdvisor(<generated>)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:149)

    当有这个注解时：
    Caused by: java.lang.IllegalStateException:
    No bean of type CacheManager could be found.
    Register a CacheManager bean or remove the @EnableCaching annotation from your configuration.
        at org.springframework.cache.annotation.AbstractCachingConfiguration.reconcileCacheManager(AbstractCachingConfiguration.java:98)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:346)
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:299)
        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:132)
    -->

    <!--单数据源，被动态数据源所使用-->
    <!--<bean id="javatest" class="org.springframework.jndi.JndiObjectFactoryBean">-->
        <!--<property name="jndiName">-->
            <!--<value>java:comp/env/jdbc/javatest</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id="demo" class="org.springframework.jndi.JndiObjectFactoryBean">-->
        <!--<property name="jndiName">-->
            <!--<value>java:comp/env/jdbc/demo</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--动态数据源，提供对多个单数据的负载均衡-->
    <!--<bean id="dynamic" class="com.bes.enterprise.jdbc.datasource.LoadBalanceDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map key-type="java.lang.String">-->
                <!--<entry key="javatest" value-ref="javatest"/>-->
                <!--<entry key="demo" value-ref="demo"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--&lt;!&ndash; 默认目标数据源为主库数据源 &ndash;&gt;-->
        <!--<property name="defaultTargetDataSource" ref="javatest"/>-->
    <!--</bean>-->

    <!--jdbcTemlate，使用动态数据源来访问数据库-->
    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource">-->
            <!--<ref bean="dynamic"/>-->
        <!--</property>-->
    <!--</bean>-->

</beans>