<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.jasonfitch.test</groupId>
    <artifactId>springmvc</artifactId>
    <packaging>war</packaging>

    <parent>
        <artifactId>MiscellaneousTest</artifactId>
        <groupId>com.jasonfitch.test</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <dependencies>

        <!--测试扫描路径是*时，为什么cache会加载-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.jdbc.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.oracle.jdbc</groupId>
            <artifactId>ojdbc6</artifactId>
            <version>${ojdbc.version}</version>
            <scope>compile</scope>
        </dependency>


        <!--测试扫描路径是*时，为什么cache会加载，有如下日常先屏蔽
         Caused by: java.lang.ArrayIndexOutOfBoundsException: 22056
        at org.springframework.asm.ClassReader.readClass(Unknown Source)
        at org.springframework.asm.ClassReader.accept(Unknown Source)
        at org.springframework.asm.ClassReader.accept(Unknown Source)
        at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:54)
        at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80)
        at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:101)
        at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:236)
        -->
        <!--<dependency>-->
        <!--<groupId>com.zaxxer</groupId>-->
        <!--<artifactId>HikariCP</artifactId>-->
        <!--<version>2.7.8</version>-->
        <!--<scope>runtime</scope>-->
        <!--</dependency>-->

        <!-- memcached 客户端-->
        <dependency>
            <groupId>net.spy</groupId>
            <artifactId>spymemcached</artifactId>
            <version>${spymemcached.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- msm 主体实现  -->
        <dependency>
            <groupId>de.javakaffee.msm</groupId>
            <artifactId>memcached-session-manager</artifactId>
            <version>${msm.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- msm tomcat8支持  -->
        <dependency>
            <groupId>de.javakaffee.msm</groupId>
            <artifactId>memcached-session-manager-tc8</artifactId>
            <version>${msm.version}</version>
            <scope>provided</scope>
        </dependency>

        <!--msm 序列化工具-->
        <dependency>
            <groupId>de.javakaffee.msm</groupId>
            <artifactId>msm-kryo-serializer</artifactId>
            <version>${msm.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${jstl.version}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${servlet-api.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-core</artifactId>
            <version>${tomcat.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-websocket</artifactId>
            <version>${tomcat.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.tuckey</groupId>
            <artifactId>urlrewritefilter</artifactId>
            <version>${urlrewritefilter.version}</version>
        </dependency>

        <!--用于 spring 的实现类 org.springframework.http.converter.json.GsonHttpMessageConverter -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>

        <!--用于 spring 的实现类 org.springframework.http.converter.json.MappingJackson2HttpMessageConverter -->
        <!-- 这是 spring 优先默认使用的 json HttpMessageConverter -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.databind.version}</version>
        </dependency>

    </dependencies>


    <build>

        <!--resources 直接形式-->
        <resources>

            <resource>
                <!--指定java资源文件目录，这个资源位于java源码目录，一般是script，conf，template之类的-->
                <directory>./src/main/resources</directory>
                <!--filtering 用来做资源文件的变量替换的，而不是过滤文件的-->
                <filtering>true</filtering>
                <includes>
                    <include>**/spring-*.xml</include>
                </includes>
            </resource>

        </resources>

        <plugins>

            <!--resources 插件形式-->
            <!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-tomcat-configuration-toTomcatConf</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${tomcat.dir.install}/conf</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>./src/main/resources</directory>
                                    <filtering>true</filtering>
                                    <excludes>
                                        <exclude>**/spring-*.xml</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            -->


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <warName>${project.artifactId}</warName>
                    <webXml>./web/WEB-INF/web.xml</webXml>
                    <!--指定web资源目录，不同于java资源文件，这个资源位于web目录中，如jsp，html之类的文件-->
                    <warSourceDirectory>./web</warSourceDirectory>

                    <!--处理用于构建war包的资源时，相对于war资源目录的过滤-->
                    <!--对路径名结尾使用 / 来标记，就会变成对整个目录的处理，否则按照文件来处理 -->
                    <warSourceExcludes>WEB-INF/unused.jsp,external/</warSourceExcludes>

                    <!--打包时排除war包中的资源，相对于编译后的输出目录过滤-->
                    <!--<packagingIncludes>-->
                        <!--*,-->
                        <!--js/**,css/**,html/**,img/**,-->
                        <!--WEB-INF/*,-->
                        <!--WEB-INF/classes/**,-->
                        <!--WEB-INF/lib/slf4j-*.jar,WEB-INF/lib/spring-*.jar,WEB-INF/lib/HikariCP-*.jar,WEB-INF/lib/jstl-*.jar,-->
                        <!--META-INF/**-->
                    <!--</packagingIncludes>-->

                    <!--<packagingExcludes>-->
                        <!--WEB-INF/lib/kryo-*.jar,WEB-INF/lib/msm-*.jar,-->
                    <!--</packagingExcludes>-->

                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>

                    <execution>
                        <id>copy-memcached-session-manager-toTomcatLib</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${tomcat.dir.install}/lib</outputDirectory>
                            <includeScope>provided</includeScope>
                            <excludeGroupIds>javax.servlet,org.apache.tomcat.embed</excludeGroupIds>
                            <!--msm-kryo-serializer其scope是provided，这里包括provided的所以需排除-->
                            <excludeArtifactIds>msm-kryo-serializer</excludeArtifactIds>
                            <excludeTransitive>true</excludeTransitive>
                            <stripVersion>false</stripVersion>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>

                    <execution>
                        <id>copy-msm-kryo-serializer-toTomcatLib</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${tomcat.dir.install}/lib</outputDirectory>
                            <includeScope>provided</includeScope>
                            <!--runtime域中包括 runtime and compile 的依赖所以要排除如下compile域的-->
                            <!--
                                The scopes being interpreted are the scopes as Maven sees them, not as specified in the pom。
                                具体的规则详见includeScope便签的说明
                            -->
                            <includeGroupIds>de.javakaffee,com.esotericsoftware</includeGroupIds>
                            <excludeArtifactIds>memcached-session-manager,memcached-session-manager-tc8</excludeArtifactIds>
                            <excludeTransitive>false</excludeTransitive>
                            <stripVersion>false</stripVersion>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>

                </executions>
            </plugin>


        </plugins>

    </build>


</project>
