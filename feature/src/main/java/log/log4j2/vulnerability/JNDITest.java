package log.log4j2.vulnerability;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class JNDITest {

    public static void main(String[] args) {

        Logger logger = LogManager.getLogger("ROOT");

//        logger.info("${jndi://attack}");

        logger.info("test {} logging", "${jndi://attack}");

        //openrasp 检测能力
        //is_hostname_dnslog
        //    检测 CheckParameter.Type#SSRF 场景 hook 点
        //        com.baidu.openrasp.hook.SocketHook#isClassMatched
        //        AbstractClassHook (com.baidu.openrasp.hook)
        //            AbstractSSRFHook (com.baidu.openrasp.hook.ssrf)
        //                CommonHttpClientHook (com.baidu.openrasp.hook.ssrf)
        //                WeblogicUDDIHook (com.baidu.openrasp.hook.ssrf)
        //                HttpClientHook (com.baidu.openrasp.hook.ssrf)
        //                OkHttpHook (com.baidu.openrasp.hook.ssrf)
        //                URLConnectionHook (com.baidu.openrasp.hook.ssrf)
        //validate_stack_java
        //    检测 CheckParameter.Type#COMMAND 场景 hook 点
        //        com.baidu.openrasp.hook.system.ProcessBuilderHook#isClassMatched
        //    检测 CheckParameter.Type#DIRECTORY 场景 hook 点
        //        com.baidu.openrasp.hook.file.FileHook#isClassMatched
        //        com.baidu.openrasp.hook.file.NioFilesListHook#isClassMatched
        //    检测 CheckParameter.Type#WRITEFILE 场景 hook 点
        //        com.baidu.openrasp.hook.file.FileOutputStreamHook#isClassMatched
        //        com.baidu.openrasp.hook.file.NioFilesWriteHook#isClassMatched

    }

}
