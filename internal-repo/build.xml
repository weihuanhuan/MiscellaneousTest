<project name="internal" default="default" basedir=".">

    <target name="taskdef">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement path="${plugin.classpath}"/>
            </classpath>
        </taskdef>
    </target>

    <target name="default">
        <antcall target="install"/>
    </target>

    <target name="init" depends="taskdef">
        <condition property="isWindows">
            <os family="windows"/>
        </condition>

        <condition property="isUnix">
            <os family="unix"/>
        </condition>

        <property file="${basedir}/build.properties"/>
    </target>

    <target name="install" depends="init">
        <echo level="info">install file.</echo>

        <!--  并行处理增加 install 的速度，并限制 并发数，以控制对系统资源的使用       -->
        <for param="file" parallel="${parallel.enabled}" threadCount="${parallel.thread.count}">
            <path>
                <!-- name of a file; each line of this file is taken to be an include pattern. -->
                <fileset dir="${mvn.directory}" includesfile="${includes.file}">
                    <!-- includesfile 和 include 是 or 的处理关系，最终的 fileset 结果是他们各自的并集 -->
                    <!--                    <include name="**/*.${mvn.packaging}"/>-->
                </fileset>
            </path>

            <!--  sequential 内部则按照顺序来执行   -->
            <sequential>
                <var name="fileName" unset="true"/>
                <basename property="fileName" file="@{file}" suffix=".${mvn.packaging}"/>

                <var name="relativeDir" unset="true"/>

                <pathconvert property="relativeDir">
                    <path location="@{file}"/>
                    <chainedmapper>
                        <!--  兼容处理 unix 与 windows 风格的路径分隔符   -->
                        <globmapper from="${mvn.directory}/*" to="./*" handledirsep="yes"/>
                    </chainedmapper>
                </pathconvert>

                <echo message=""></echo>
                <echo message="######################################"></echo>
                <echo message="@{file}"></echo>
                <echo message="${mvn.directory}"></echo>
                <echo message="${relativeDir}"></echo>
                <echo message="######################################"></echo>
                <echo message=""></echo>

                <antcall target="mvn_install">
                    <param name="mvn.file" value="@{file}"/>
                    <param name="mvn.groupId" value="${mvn.group.prefix}"/>
                    <param name="mvn.artifactId" value="${fileName}"/>
                    <param name="mvn.packaging" value="${mvn.packaging}"/>
                </antcall>
            </sequential>
        </for>
    </target>

    <!-- 在 windows 下，直接使用 【mvn】来执行会提示找不见【mvn】命令   -->
    <!-- 虽然 windows 下的【cmd /c】方式不会有 linux 下的递归启动进程问题，
         但是如果直接指定【mvn】命令的话就找不见需要使用【mvn.bat】或者【mvn.cmd】这样的全文件名格式
    -->
    <!-- 这里是由于 cmd 在查找命令时，会自动考虑不携带 cmd，或者 bat 扩展后缀的形式。   -->
    <!-- 这里要注意 maven 在 3.3.9 版本使用【mvn.bat】，而在 3.5.4 版本使用【mvn.cmd】   -->
    <target name="mvn_windows_setup" if="isWindows">
        <property name="shell.executable" value="cmd"/>
        <property name="shell.args" value="/c"/>
    </target>

    <!-- 在 linux 下，使用这里的 【sh -c】方式执行会导致该 install 任务被无休止的递归调用   -->
    <!-- 这个问题的原因暂时不明，如果我们将 shell.executable 直接切换为 【mvn】来直接调用就没有问题  -->
    <!-- 初步猜测可能是因为 【sh -c】会开启新的 shell 会话来执行 install 任务，但是这个会话没有结束导致的 -->
    <target name="mvn_unix_setup" if="isUnix">
        <property name="shell.executable" value="sh"/>
        <property name="shell.args" value="-c"/>
    </target>

    <target name="mvn_install" depends="mvn_windows_setup,mvn_unix_setup">
        <echo message=""></echo>
        <echo message="######################################"></echo>
        <echo message="${shell.executable}"></echo>
        <echo message="${shell.args}"></echo>
        <echo message="${mvn.goal}"></echo>
        <echo message="${mvn.file}"></echo>
        <echo message="${mvn.groupId}"></echo>
        <echo message="${mvn.artifactId}"></echo>
        <echo message="${mvn.version}"></echo>
        <echo message="${mvn.packaging}"></echo>
        <echo message="${mvn.repo.local}"></echo>
        <echo message="######################################"></echo>
        <echo message=""></echo>

        <!-- 当启动 主maven 额外的设置了 repo 时，我们需要对被 ant 调用的 mvn 传递启动 maven 的 local repository 信息，
             否则被调 mvn 操纵的 repository 和调用 ant 的 maven 仓库不一致，会导致安装后的依赖被安装到系统的 maven repo 中了，
             进而使得 主maven 中无法在其自身的仓库中找见我们这里 install 的依赖，产生依赖解析的问题。
        -->
        <!--
            这是由于我们在 ant 中使用 exec 任务调用了 mvn，而后者是独立启动的 maven 进程
            而对于独立启动的内部 maven 进程来说，其不会看见外部 maven 在执行命令时通过选项 【mvn -s settings.xml】 所注定的配置文件。
            此时为了保证内部 maven 能够正常查找 install 插件来执行命令，我们要保证内部 maven 执行时，其仓库 settings.xml 配置可以访问到中央库，以下载依赖
            这里由于我们的 【${mvn.executable}】 没有指定 【-s】 ， 此时他默认使用系统环境变量【$M2_HOME】 所指定的,要保证其中的 settings.xml 可用就行了
        -->
        <exec dir="${basedir}" executable="${shell.executable}">
            <arg value="${shell.args}"/>
            <arg value="${mvn.executable}"/>
            <arg value="${mvn.goal}"/>
            <arg value="-Dfile=${mvn.file}"/>
            <arg value="-DgroupId=${mvn.groupId}"/>
            <arg value="-DartifactId=${mvn.artifactId}"/>
            <arg value="-Dversion=${mvn.version}"/>
            <arg value="-Dpackaging=${mvn.packaging}"/>
            <!--
                注意这里是要给内部的 ant 所调用的内部 maven 提供自定义本地仓库，
                所以要使用 mvn 标准的【-Dmaven.repo.local】 而 不是我们自己定义的属性 【-Dmvn.repo.local】
                我们自己在 pom.xml 中定义的【<property name="mvn.repo.local" value="${settings.localRepository}"/>】名字是专门和标准不同的
                目的是为了可以通过不同的属性名来分别配置他们的值，使得外部 maven 和 内部 maven 可以使用不同本地仓库
                另外对于 <property> 来说其 【value】 是默认值的意思，其值 【${settings.localRepository}】 指 settings 文件中的 <localRepository>
                如果我们在调用外部 maven 时，使用命令行设置系统属性 【-Dmvn.repo.local】 就可以覆盖他的值
                mvn clean install -DskipTests  -Dmvn.repo.local="E:\Temporary\repository-by-ant-called-mvn"
             -->
            <arg value="-Dmaven.repo.local=${mvn.repo.local}"/>
        </exec>
    </target>

</project>
